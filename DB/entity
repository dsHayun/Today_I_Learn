Entity : db 테이블이라고 생각

- 데이터 모델링에서 사용되는 객체
- 업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 어떤 것
    - 어떤 것이라고 하는 것처럼 추상적인 의미
    - 보이는 개념일 수도 결제, 주문처럼 보이지 않는 개념일 수도 있다
    - 학교에서는 과목이라는 엔티티가 있을 수 있다

![Entity.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3f3ea575-c2e8-4788-9a7b-952ba4e54b4b/Entity.png)

인스턴스 : db에 저장된 데이터 내용의 집합

속성 : 인스턴스의 구성요소 → 더이상 분리되지 않는 단위로 필요한 데이터를 저장할수 있다 

- 회원을 예로 들자면 회원번호, 비밀 번호등이 있을수 있다

도메인 : 속성이 가질 수있는 값의 범위 

성별이라는 속성이 남자나 여자 둘중에 하나의 값을 가진다면 이 남자, 여자 외의 다른 값은 사용할수 없게 해주는 것이 도메인이다 

테이블에서 칼럼을 만들때도 값의 범위과 설정을 도메인이라고 생각할수 있다 

![erd예제.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2cd90c31-15c5-4e16-9a0a-c78fbbe92347/erd%EC%98%88%EC%A0%9C.png)

PK : 기본키
FK : 다른 객체의 PK값

- 장바구니를 어떤 유저가 담았는지 알기 위해 유저의 PK값인 user_no가 있는 것

## 특징

이런 특징들을 가지고 있지 않다면 부적절한 엔티티 일수 있다

- 업무에서 **필요로 하는 정보**여야 한다
    
    환자라는 엔티티는 병원에서는 꼭 필요하지만 회사에서는 필요하지 않다 
    

- **유일한 식별자**가 있어야 한다
    
    회사에서 직원들을 구분할 수 있는 방법은 이름이나 사원 번호등이 있다
    
    - 이름은 같은 사람이 있을 수도 있으니 유일하게 식별될 수 없다
    - 사원번호는 직원들에게 주어진 고유한 번호로 중복되지 않고 유일한 식별자가 될 수 있다
    
    인스턴스를 **각각 구분 할수 있는** 유일한 식별자가 있어야 한다 
    

- **두개 이상의 인스턴스**가 있어야 한다
    
    영속성으로 존재하는 인스턴스의 집합 ⇒ 인스턴스가 2개 이상이어야 한다
    
    - 영속성이란?
        
        Persistence : 데이터를 만든 프로그램이 종료되어도 사라지지 않는 데이터의 특성을 뜻한다  
        
    - 인스턴스가 한개 밖에 없는 회사, 병원 엔티티는 집합이 아니기 때문에 엔티티가 될수 없다

- **업무 프로세스에 사용** 되야 한다
    
    엔티티를 만들었는데 업무에 사용되지 않는다면 필요하지 않은 엔티티거나 누락된 프로세스가 있다는 의미 일수 있다 그렇다면 제거하거나 필요한 프로세스를 추가해야 한다 
    
    ![엔티티 득징.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0d5f564f-10f6-4a73-98e7-d5567d317d80/%EC%97%94%ED%8B%B0%ED%8B%B0_%EB%93%9D%EC%A7%95.png)
    
    - 은행 시스템에서 고객과 계좌 엔티티는 필요하지만 학생엔티티는 필요가 없다

- 반드시 **속성**이 있어야 한다
    
    속성이 없는 엔티티는 의미가 없다 
    관계가 생략되거나 속성 정보가 누락되는 경우에 발생한다
    
    - 고객 엔티티에는 회원ID, 비밀번호, 이름, 전화번호, 주소 같은 속성이 있다

- 다른 엔티티간의 **관계**가 있어야 한다
    
    다른 엔티티와 한개 이상에 관계가 있어야 한다 
    
    - 학생은 동아리엥 소속되어 있다

## 종류

![엔티티 종류.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3b7b245f-ea57-441b-9d4f-48ed9b1338e9/%EC%97%94%ED%8B%B0%ED%8B%B0_%EC%A2%85%EB%A5%98.png)

<aside>
💡 물리적 형태가 있는지

| 유형 엔티티 | 지속적으로 사용됨
 - 고객, 직원, 선생님, 학생 |
| --- | --- |
| 개념 엔티티 | 물리적 형태가 없고 개념적으로 사용됨
 - 거래소 종목, 생명보험 상품 |
| 사건 엔티티 | 비즈니스 프로세스를 실행하면서 생성되는 엔티티 
 - 주문, 취소, 수수료 청구 |
</aside>

<aside>
💡 언제 발생했는지

| 기본 / 키 엔티티 
Basic | 다른 엔티티에게 영향을 바지 않고 독립적으로 만들어짐
 - 고객, 상품, 부서 |
| --- | --- |
| 중심 엔티티 Main | 기본과 행위 사이에 있는 것 ⇒ 기본 엔티티로부터 발생하고 행위 엔티티를 만드는 것 
 - 주문, 최소, 체결  |
| 행위 엔티티
Active | 2개 이상의 엔티티로부터 발생
 - 주문 내용, 채결 이력 |
</aside>

## 테이블과 차이점

엔티티

- db나 SQL에 **존재 하지 않는 일종의 개념**
- 테이블이 될수도 있고 안될수도 있다

테이블

- DB나 SQL에 존재하고 물리적인 구조를 가지고 있다

- 모델
    - 물리 모델링 → 테이블
    - 논리는 가능, 물리에서 불가능한 추상적인 엔티티→ 테이블 안됨
    
    | 논리 모델 | 물리 모델 |
    | --- | --- |
    | 엔티티(Entity) | 테이블(Table) |
    | 속성, 어트리뷰트(Attribute) | 컬럼(Column) |
    | 관계, 릴레이션(Relation) | 관계, 릴레이션(Relation) |
    | 키 그룹(Key group) | 인덱스(Index) |
